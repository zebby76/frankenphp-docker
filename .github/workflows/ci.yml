name: Docker Build images

run-name: Docker Build ${{ github.ref_name }} by @${{ github.actor }}

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

on:

  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"

  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'

  workflow_dispatch:
    inputs:
      version:
        description: "Docker Image Version"
        required: false
        type: string

jobs:

  prepare:

    runs-on: ubuntu-24.04

    outputs:
      # Push if it's a scheduled job, a tag, or if we're committing to the main branch
      push: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.version) || startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && github.event_name != 'pull_request')) && true || false }}
      sbom: ${{ github.event_name != 'pull_request' }}
      provenance: ${{ github.event_name != 'pull_request' }}
      ref: ${{ steps.check.outputs.ref || (github.event_name == 'workflow_dispatch' && inputs.version) || '' }}
      platforms: ${{ steps.matrix.outputs.platforms }}
      metadata: ${{ steps.matrix.outputs.metadata }}
      skip: ${{ steps.check.outputs.skip }}

    steps:

      - name: Checks
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the Docker images must be rebuilt
          if [[ "${GITHUB_EVENT_NAME}" != "schedule"  ]]; then
              echo skip=false >> "${GITHUB_OUTPUT}"
              exit 0
          fi

          {
            echo ref="$(gh release view --repo zebby76/frankenphp-docker --json tagName --jq '.tagName')"
            echo skip=false
          } >> "${GITHUB_OUTPUT}"

      - name: Checkout source
        uses: actions/checkout@v4
        if: ${{ !fromJson(steps.check.outputs.skip) }}
        with:
          ref: ${{ steps.check.outputs.ref }}

      - name: Set up Docker Buildx
        if: ${{ !fromJson(steps.check.outputs.skip) }}
        uses: docker/setup-buildx-action@v3

      - name: Create variants matrix
        if: ${{ !fromJson(steps.check.outputs.skip) }}
        id: matrix
        shell: bash
        run: |
          set -e
          METADATA="$(docker buildx bake --print | jq -c)"
          {
            echo metadata="${METADATA}"
            echo platforms="$(jq -c 'first(.target[]) | .platforms' <<< "${METADATA}")"
          } >> "${GITHUB_OUTPUT}"
        env:
          GIT_HASH: ${{ github.sha }}
          DOCKER_IMAGE_VERSION: ${{ (github.ref_type == 'tag' && github.ref_name) || steps.check.outputs.ref || 'snapshot' }}

  build:

    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}

    if: ${{ !fromJson(needs.prepare.outputs.skip) }}

    needs:
      - prepare

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.platforms) }}

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:

      - name: Prepare
        id: prepare
        run: |
          platform=${{ matrix.platform }}
          echo "sanitized_platform=${platform//\//-}" >> "${GITHUB_OUTPUT}"

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.ref }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Bake and push image
        uses: docker/bake-action@v6
        with:
          sbom: ${{ needs.prepare.outputs.sbom }}
          provenance: ${{ needs.prepare.outputs.provenance }}
          push: ${{ needs.prepare.outputs.push }}
          targets: prd,dev
          files: |
            docker-bake.hcl
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
        env:
          GIT_HASH: ${{ github.sha }}
          DOCKER_IMAGE_VERSION: ${{ (github.ref_type == 'tag' && github.ref_name) || needs.prepare.outputs.ref || 'snapshot' }}

      - name: Docker Scout
        if: ${{ needs.prepare.outputs.push }}
        uses: docker/scout-action@v1
        with:
          command: quickview
          image: ${{ steps.meta.outputs.tags }}
          to-env: production
          ignore-unchanged: true
          only-severities: critical,high
          github-token: ${{ secrets.GITHUB_TOKEN }}